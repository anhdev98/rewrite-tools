import streamlit as st
import textwrap
from pytube import YouTube 
from youtube_transcript_api import YouTubeTranscriptApi
from newspaper import Article
import google.generativeai as genai
import time

def init_gemini():
    # C·∫•u h√¨nh Gemini API 
    try:
        GEMINI_API_KEY = st.secrets.get("GEMINI_API_KEY")
        if not GEMINI_API_KEY:
            GEMINI_API_KEY = "AIzaSyD2FAvYNFEezIZn4bzbY7v1-RSLlfDGudg"  # Fallback key
        genai.configure(api_key=GEMINI_API_KEY)
        return genai.GenerativeModel('gemini-pro')
    except Exception as e:
        st.error(f"L·ªói kh·ªüi t·∫°o Gemini: {str(e)}")
        return None

def get_youtube_content(url):
    try:
        yt = YouTube(url)
        video_id = yt.video_id
        transcript = YouTubeTranscriptApi.get_transcript(video_id, languages=['vi', 'en'])
        return "\n".join([entry['text'] for entry in transcript])
    except Exception as e:
        return f"L·ªói khi l·∫•y n·ªôi dung YouTube: {str(e)}"

def get_article_content(url):
    try:
        article = Article(url)
        article.download()
        article.parse()
        return article.text
    except Exception as e:
        return f"L·ªói khi l·∫•y n·ªôi dung b√†i vi·∫øt: {str(e)}"

def split_into_chunks(text, chunk_size=4000):
    return textwrap.wrap(text, chunk_size, break_long_words=False)

def rewrite_content(model, content, style_prompt, progress_bar, chunk_size=4000):
    try:
        chunks = split_into_chunks(content, chunk_size)
        rewritten_content = []
        
        for i, chunk in enumerate(chunks):
            system_prompt = f"""
            {style_prompt}
            H√£y vi·∫øt l·∫°i ƒëo·∫°n vƒÉn sau theo phong c√°ch t·ª± nhi√™n, 
            tr√°nh t·ª´ ng·ªØ m√°y m√≥c v√† gi·ªØ nguy√™n √Ω ch√≠nh. N·∫øu ƒëo·∫°n vƒÉn b·∫±ng ti·∫øng Vi·ªát, 
            h√£y gi·ªØ nguy√™n ti·∫øng Vi·ªát v√† th√™m c√°c t·ª´ ƒë·ªãa ph∆∞∆°ng ph√π h·ª£p:
            
            {chunk}
            """
            
            response = model.generate_content(system_prompt)
            rewritten_content.append(response.text)
            
            # C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô
            progress = (i + 1) / len(chunks)
            progress_bar.progress(progress)
            
            # Th√™m delay nh·ªè ƒë·ªÉ tr√°nh rate limit
            time.sleep(0.5)
            
        return "\n".join(rewritten_content)
        
    except Exception as e:
        return f"L·ªói khi vi·∫øt l·∫°i n·ªôi dung: {str(e)}"

def main():
    st.set_page_config(
        page_title="Content Rewrite Tool",
        page_icon="üìù",
        layout="wide"
    )
    
    st.title("üìù Content Rewrite Tool")
    
    # Kh·ªüi t·∫°o Gemini model
    model = init_gemini()
    if not model:
        st.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi Gemini API. Vui l√≤ng ki·ªÉm tra API key.")
        return
    
    # Input section
    st.header("Input")
    
    col1, col2 = st.columns([3, 1])
    
    with col1:
        input_type = st.radio("Ch·ªçn lo·∫°i input:", ["URL", "Text tr·ª±c ti·∫øp"])
    
    with col2:
        chunk_size = st.number_input("ƒê·ªô d√†i chunk (k√Ω t·ª±):", 
                                   min_value=1000, 
                                   max_value=8000, 
                                   value=4000)
    
    content = ""
    if input_type == "URL":
        url = st.text_input("Nh·∫≠p URL (YouTube ho·∫∑c b√†i vi·∫øt):")
        if url:
            with st.spinner("ƒêang l·∫•y n·ªôi dung..."):
                if "youtube.com" in url or "youtu.be" in url:
                    content = get_youtube_content(url)
                else:
                    content = get_article_content(url)
    else:
        content = st.text_area("Nh·∫≠p n·ªôi dung c·∫ßn vi·∫øt l·∫°i:", height=200)
    
    # Style selection
    st.subheader("Phong c√°ch vi·∫øt")
    col1, col2 = st.columns([3, 1])
    
    with col1:
        style = st.selectbox(
            "Ch·ªçn phong c√°ch:",
            ["T·ª± nhi√™n", "H·ªçc thu·∫≠t", "Blog", "B√°o ch√≠", "Truy·ªán ng·∫Øn"]
        )
    
    style_prompts = {
        "T·ª± nhi√™n": "Vi·∫øt v·ªõi gi·ªçng ƒëi·ªáu t·ª± nhi√™n, th√¢n thi·ªán nh∆∞ ƒëang tr√≤ chuy·ªán. S·ª≠ d·ª•ng t·ª´ ng·ªØ ƒë·ªùi th∆∞·ªùng, d·ªÖ hi·ªÉu.",
        "H·ªçc thu·∫≠t": "Vi·∫øt theo phong c√°ch h·ªçc thu·∫≠t, chuy√™n nghi·ªáp. S·ª≠ d·ª•ng ng√¥n ng·ªØ trang tr·ªçng v√† tr√≠ch d·∫´n khi c·∫ßn.",
        "Blog": "Vi·∫øt theo phong c√°ch blog c√° nh√¢n, chia s·∫ª tr·∫£i nghi·ªám. Th√™m c·∫£m x√∫c v√† quan ƒëi·ªÉm c√° nh√¢n.",
        "B√°o ch√≠": "Vi·∫øt theo phong c√°ch b√°o ch√≠, kh√°ch quan v√† s√∫c t√≠ch. T·∫≠p trung v√†o s·ª± ki·ªán v√† d·ªØ li·ªáu.",
        "Truy·ªán ng·∫Øn": "Vi·∫øt theo phong c√°ch vƒÉn h·ªçc, tƒÉng t√≠nh mi√™u t·∫£ v√† c·∫£m x√∫c. Th√™m chi ti·∫øt sinh ƒë·ªông."
    }
    
    # Process button
    if st.button("Vi·∫øt l·∫°i n·ªôi dung", type="primary"):
        if not content:
            st.warning("Vui l√≤ng nh·∫≠p n·ªôi dung tr∆∞·ªõc khi vi·∫øt l·∫°i")
            return
            
        progress_bar = st.progress(0)
        
        # Display original content
        st.subheader("N·ªôi dung g·ªëc")
        with st.expander("Xem n·ªôi dung g·ªëc"):
            st.text_area("", value=content, height=200, disabled=True)
        
        # Process and display rewritten content
        st.subheader("N·ªôi dung ƒë√£ vi·∫øt l·∫°i")
        with st.spinner("ƒêang x·ª≠ l√Ω..."):
            rewritten = rewrite_content(
                model, 
                content, 
                style_prompts[style],
                progress_bar,
                chunk_size
            )
            st.text_area("", value=rewritten, height=400)
        
        progress_bar.progress(1.0)
        
        # Download button for rewritten content
        st.download_button(
            label="T·∫£i n·ªôi dung ƒë√£ vi·∫øt l·∫°i",
            data=rewritten,
            file_name="rewritten_content.txt",
            mime="text/plain"
        )
        
        st.success("Ho√†n th√†nh!")

if __name__ == "__main__":
    main()
